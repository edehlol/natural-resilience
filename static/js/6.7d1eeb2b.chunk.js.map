{"version":3,"sources":["features/quiz/Question.js","features/quiz/Results.js","features/quiz/Quiz.js"],"names":["Question","dispatch","useDispatch","question","useSelector","selectCurrentQuestion","onClickAnswer","value","setAnswer","nextQuestion","my","align","h","size","category","subcategory","colorScheme","variant","px","fontSize","onClick","Results","totalScore","state","quiz","maxTotalScore","resultsPerCategory","selectResultsPerCategory","resultsDescription","useEffect","setTotalScore","setTotalMaxScore","setResultsDescription","calculateResult","maxValue","result","mb","map","renderedSubCategories","subcategories","name","isNumeric","nanoid","placement","bg","Quiz","completed","quizLength","questions","length","currentIndex","width","disabled","previousQuestion","hasStripe","Math","floor","position","bottom","height"],"mappings":"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","file":"static/js/6.7d1eeb2b.chunk.js","sourcesContent":["import React from 'react';\nimport { Stack, Button, Center, Tag, Text, Box, Heading } from '@chakra-ui/react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nextQuestion, setAnswer, selectCurrentQuestion } from './quizSlice';\n\nexport const Question = () => {\n  const dispatch = useDispatch();\n  const question = useSelector(selectCurrentQuestion);\n\n  const onClickAnswer = (value) => {\n    dispatch(setAnswer(value));\n    dispatch(nextQuestion());\n  };\n\n  if (!question) {\n    return <></>;\n  }\n  return (\n    <Box my=\"8\" align=\"center\">\n      <Box h=\"16\">\n        <Heading size=\"md\">{question.category}</Heading>\n        <Center>\n          {question.subcategory && (\n            <Tag colorScheme=\"green\" variant=\"solid\" px=\"2\">\n              {question.subcategory}\n            </Tag>\n          )}\n        </Center>\n      </Box>\n\n      <Center h={32} my=\"4\">\n        <Text fontSize=\"lg\" align=\"left\">\n          {question.question}\n        </Text>\n      </Center>\n\n      <Stack>\n        <Button variant=\"outline\" colorScheme=\"red\" onClick={() => onClickAnswer(0)}>\n          Untrue\n        </Button>\n        <Button variant=\"outline\" colorScheme=\"orange\" onClick={() => onClickAnswer(0.25)}>\n          Mostly Untrue\n        </Button>\n        <Button variant=\"outline\" colorScheme=\"gray\" onClick={() => onClickAnswer(0.5)}>\n          Moderately\n        </Button>\n        <Button variant=\"outline\" colorScheme=\"teal\" onClick={() => onClickAnswer(0.75)}>\n          Mostly True\n        </Button>\n        <Button variant=\"outline\" colorScheme=\"green\" onClick={() => onClickAnswer(1)}>\n          True\n        </Button>\n      </Stack>\n    </Box>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  setTotalScore,\n  selectResultsPerCategory,\n  setResultsDescription,\n  setTotalMaxScore,\n} from './quizSlice';\nimport {\n  Table,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n  Container,\n  Heading,\n  Text,\n  TableCaption,\n} from '@chakra-ui/react';\nimport { nanoid } from '@reduxjs/toolkit';\n\nexport const Results = () => {\n  const dispatch = useDispatch();\n  const totalScore = useSelector((state) => state.quiz.totalScore);\n  const maxTotalScore = useSelector((state) => state.quiz.maxTotalScore);\n  const resultsPerCategory = useSelector(selectResultsPerCategory);\n  const resultsDescription = useSelector((state) => state.quiz.resultsDescription);\n  useEffect(() => {\n    dispatch(setTotalScore());\n    dispatch(setTotalMaxScore());\n    dispatch(setResultsDescription());\n  }, [dispatch]);\n\n  const calculateResult = (value, maxValue) => {\n    const result = (value / maxValue) * 100;\n    switch (true) {\n      case result >= 95:\n        return 'A+';\n      case result >= 90:\n        return 'A';\n      case result >= 85:\n        return 'A-';\n      case result >= 80:\n        return 'B+';\n      case result >= 75:\n        return 'B';\n      case result >= 70:\n        return 'B-';\n      case result >= 65:\n        return 'C+';\n      case result >= 60:\n        return 'C';\n      case result >= 55:\n        return 'C-';\n      case result >= 50:\n        return 'D+';\n      case result >= 45:\n        return 'D';\n      case result >= 40:\n        return 'D-';\n      case result < 35:\n        return 'F';\n      default:\n        return '';\n    }\n  };\n\n  const renderResults = () => {\n    const results = resultsPerCategory.map((result) => {\n      const renderedSubCategories = result.subcategories.map(\n        (subcategory) =>\n          subcategory && (\n            <Tr key={nanoid()}>\n              <Td>{subcategory.name}</Td>\n              <Td isNumeric>{calculateResult(subcategory.value, subcategory.maxValue)}</Td>\n            </Tr>\n          )\n      );\n      return (\n        <Table key={nanoid()} mb=\"16\">\n          <TableCaption fontSize=\"xl\" placement=\"top\">\n            {result.category}\n          </TableCaption>\n          <Thead>\n            {result.subcategories[0] !== null && (\n              <Tr>\n                <Th>Subcategory</Th>\n                <Th isNumeric>Score</Th>\n              </Tr>\n            )}\n          </Thead>\n          <Tbody>\n            {renderedSubCategories}\n            <Tr bg=\"gray.300\">\n              <Td>\n                <b>Score</b>\n              </Td>\n              <Td isNumeric>\n                <b>{calculateResult(result.value, result.maxValue)}</b>\n              </Td>\n            </Tr>\n          </Tbody>\n        </Table>\n      );\n    });\n    return results;\n  };\n  return (\n    <Container>\n      <Text align=\"center\" mb=\"4\" fontSize=\"lg\">\n        Your results:\n      </Text>\n      {renderResults()}\n\n      <Text align=\"center\" fontSize=\"lg\">\n        Total Score:{' '}\n      </Text>\n      <Heading mb=\"4\" align=\"center\" size=\"3xl\">\n        {calculateResult(totalScore, maxTotalScore)}\n      </Heading>\n      <Heading size=\"md\" align=\"center\" mb=\"8\">\n        {resultsDescription}\n      </Heading>\n    </Container>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Question } from './Question';\nimport { Results } from './Results';\nimport { previousQuestion } from './quizSlice';\nimport { Container, Button, Divider, Center, Progress } from '@chakra-ui/react';\n\nconst Quiz = () => {\n  const dispatch = useDispatch();\n  const completed = useSelector((state) => state.quiz.completed);\n  const quizLength = useSelector((state) => state.quiz.questions.length);\n  const currentIndex = useSelector((state) => state.quiz.currentIndex);\n\n  if (completed) {\n    return <Results />;\n  } else {\n    return (\n      <>\n        <Container>\n          <Question />\n          <Divider my={6} />\n          <Center mb=\"12\">\n            <Button\n              colorScheme=\"blackAlpha\"\n              width={64}\n              disabled={currentIndex === 0 ? true : false}\n              onClick={() => dispatch(previousQuestion())}\n            >\n              Back\n            </Button>\n          </Center>\n        </Container>\n\n        <Progress\n          hasStripe\n          colorScheme=\"green\"\n          value={Math.floor((currentIndex / quizLength) * 100)}\n          position=\"fixed\"\n          bottom=\"0\"\n          width=\"100%\"\n          height=\"6\"\n        />\n      </>\n    );\n  }\n};\n\nexport default Quiz;\n"],"sourceRoot":""}